<?php namespace Orbit\Controller\API\v1\Pub\Store;
/**
 * API to read sitemap.xml generated by artisan
 * @author ahmad <ahmad@dominopos.com>
 */

use OrbitShop\API\v1\PubControllerAPI;
use Config;
use Illuminate\Support\Facades\Response;
use Illuminate\Database\QueryException;
use OrbitShop\API\v1\Helper\Input as OrbitInput;
use OrbitShop\API\v1\OrbitShopAPI;
use OrbitShop\API\v1\Exception\InvalidArgsException;
use Helper\EloquentRecordCounter as RecordCounter;
use Validator;
use Mall;
use Tenant;
use App;
use DB;

class StoreListAdactiveAPIController extends PubControllerAPI
{
    public function getStoreListAdactive()
    {
        try {
            $httpCode = 200;
            $enabled = Config::get('orbit.enable_api.adactive.enable_store_list_adactive_api', FALSE);

            if (!$enabled) {
                return Response::view('errors.404');
            }

            $mallId = OrbitInput::get('mall_id');
            $this->registerCustomValidation();

            $validator = Validator::make(
                array(
                    'mall_id' => $mallId
                ),
                array(
                    'mall_id' => 'required|orbit.empty.mall|orbit.whitelist.mall_id'
                ),
                array(
                    'orbit.whitelist.mall_id' => 'Access Denied'
                )
            );

            // Run the validation
            if ($validator->fails()) {
                $errorMessage = $validator->messages()->first();
                OrbitShopAPI::throwInvalidArgument($errorMessage);
            }

            // Get the maximum record
            $maxRecord = (int) Config::get('orbit.pagination.retailer.max_record');
            if ($maxRecord <= 0) {
                // Fallback
                $maxRecord = (int) Config::get('orbit.pagination.max_record');
                if ($maxRecord <= 0) {
                    $maxRecord = 20;
                }
            }
            // Get default per page (take)
            $perPage = (int) Config::get('orbit.pagination.retailer.per_page');
            if ($perPage <= 0) {
                // Fallback
                $perPage = (int) Config::get('orbit.pagination.per_page');
                if ($perPage <= 0) {
                    $perPage = 20;
                }
            }

            $prefix = DB::getTablePrefix();
            $mallInfo = Mall::select('name as mall_name', 'city', 'province', 'country', 'address_line1 as address', 'operating_hours',
                                    DB::raw("SUBSTR(AsText({$prefix}merchant_geofences.position), LOCATE('(', AsText({$prefix}merchant_geofences.position)) + 1, LOCATE(' ', AsText({$prefix}merchant_geofences.position)) - 1 - LOCATE('(', AsText({$prefix}merchant_geofences.position))) as lat"),
                                    DB::raw("SUBSTR(AsText({$prefix}merchant_geofences.position), LOCATE(' ', AsText({$prefix}merchant_geofences.position)) + 1, LOCATE(')', AsText({$prefix}merchant_geofences.position)) - 1 - LOCATE(' ', AsText({$prefix}merchant_geofences.position))) as lon"))
                            ->leftJoin('merchant_geofences', 'merchant_geofences.merchant_id', '=', 'merchants.merchant_id')
                            ->where('merchants.merchant_id', '=', $mallId)
                            ->first();

            $stores = Tenant::select('merchant_id as merchant_id', 'name as store_name', 'description', 'floor', 'unit', 'media.cdn_url as logo_cdn')
                            ->with(['translations' => function($q) use($prefix) {
                                    $q->select('merchant_translations.merchant_id', 'description', DB::raw("{$prefix}languages.name as language_code"));
                                },
                                'categories' => function($q) use($prefix) {
                                    $q->select('category_merchant.merchant_id', 'categories.category_id')
                                        ->where('categories.status', 'active')
                                        ->with(['translationsWithoutStatusExclusion' => function($q2) {
                                            $q2->leftJoin('languages', 'category_translations.merchant_language_id', '=', 'languages.language_id');
                                        }]);
                                },
                                'product_tags' => function($q) {
                                    $q->select('product_tag_object.object_id', 'product_tags.product_tag');
                                }])
                            ->leftJoin('media', function($q) {
                                    $q->on('media.media_name_long', '=', DB::raw("'retailer_logo_orig'"));
                                    $q->on('media.object_id', '=', 'merchants.merchant_id');
                                })
                            ->where('parent_id', '=', $mallId)
                            ->where('status', '=', 'active');

            $_stores = clone $stores;

            $take = $perPage;
            OrbitInput::get('take', function ($_take) use (&$take, $maxRecord) {
                if ($_take > $maxRecord) {
                    $_take = $maxRecord;
                }
                $take = $_take;

                if ((int)$take <= 0) {
                    $take = $maxRecord;
                }
            });
            $stores->take($take);

            $skip = 0;
            OrbitInput::get('skip', function($_skip) use (&$skip, $stores)
            {
                if ($_skip < 0) {
                    $_skip = 0;
                }

                $skip = $_skip;
            });
            $stores->skip($skip);

            $totalStores = $_stores->count();
            $listOfStores = $stores->get();

            foreach ($listOfStores as $listOfStore) {
                foreach ($listOfStore->translations as $translation) {
                    unset($translation->merchant_id);
                }

                $categories = [];
                foreach ($listOfStore->categories as $category) {
                    $_category = new \stdclass();
                    $categoryTranslation = [];
                    foreach ($category->translationsWithoutStatusExclusion as $translation) {
                        $_translation = new \stdclass();
                        $_translation->category_name = $translation->category_name;
                        $_translation->language_code = $translation->name;
                        $categoryTranslation[] = $_translation;
                    }
                    $_category->category_id = $category->category_id;
                    $_category->translations = $categoryTranslation;
                    $categories[] = $_category;
                }
                unset($listOfStore->categories);
                $listOfStore->categories = $categories;

                $productTags = [];
                foreach ($listOfStore->product_tags as $productTag) {
                    $productTags[] = $productTag->product_tag;
                }
                unset($listOfStore->product_tags);
                $listOfStore->product_tags = $productTags;
            }

            $data = new \stdclass();
            $data->total_records = $totalStores;
            $data->returned_records = count($listOfStores);
            $data->mall_info = $mallInfo;
            $data->records = $listOfStores;

            $this->response->data = $data;
        } catch (QueryException $e) {
            $this->response->code = $e->getCode();
            $this->response->status = 'error';
            $this->response->message = $e->getMessage();
            $this->response->data = null;

        } catch (\Exception $e) {
            $this->response->code = $e->getCode();
            $this->response->status = 'error';
            $this->response->message = $e->getMessage();
            $this->response->data = null;
        }

        $output = $this->render($httpCode);
        return $output;
    }



    protected function registerCustomValidation()
    {
        // Check the existance of mall id
        Validator::extend('orbit.empty.mall', function ($attribute, $value, $parameters) {
            $mall = Mall::excludeDeleted()
                        ->where('merchant_id', $value)
                        ->first();

            if (empty($mall)) {
                return FALSE;
            }

            App::instance('orbit.empty.mall', $mall);

            return TRUE;
        });

        // Check the mall id against whitelist ids
        Validator::extend('orbit.whitelist.mall_id', function ($attribute, $value, $parameters) {
            $whiteListedIds = Config::get('orbit.enable_api.adactive.whitelist_mall_ids', []);
            if (empty($whiteListedIds)) {
                return TRUE;
            }

            if (in_array($value, $whiteListedIds)) {
                return TRUE;
            }

            return FALSE;
        });
    }
}